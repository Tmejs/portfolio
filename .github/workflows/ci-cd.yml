name: Portfolio Services CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'
  SPRING_PROFILES_ACTIVE: test

jobs:
  changes:
    name: Detect Service Changes
    runs-on: ubuntu-latest
    outputs:
      banking-service: ${{ steps.changes.outputs.banking-service }}
      analytics-service: ${{ steps.changes.outputs.analytics-service }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            banking-service:
              - 'spring-boot-microservices-demo/**'
              - '.github/workflows/ci-cd.yml'
            analytics-service:
              - 'account-analytics-service/**'
              - '.github/workflows/account-analytics-service.yml'

  build:
    name: Build Banking Service
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.banking-service == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile application
      working-directory: ./spring-boot-microservices-demo
      run: mvn clean compile -B --no-transfer-progress
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: spring-boot-microservices-demo/target/classes/
        retention-days: 1

  test:
    name: Run Banking Tests
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: needs.changes.outputs.banking-service == 'true'
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: spring-boot-microservices-demo/target/classes/
        
    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      working-directory: ./spring-boot-microservices-demo
      run: |
        mvn test -B --no-transfer-progress \
          -Dtest='!**/*IT' \
          -DfailIfNoTests=false
          
    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      working-directory: ./spring-boot-microservices-demo
      run: |
        mvn verify -B --no-transfer-progress \
          -DskipUnitTests=true \
          -Dspring.profiles.active=test
          
    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.test-type }}
        path: |
          spring-boot-microservices-demo/target/surefire-reports/
          spring-boot-microservices-demo/target/failsafe-reports/
        retention-days: 7
        
    - name: Upload Coverage Reports
      if: matrix.test-type == 'integration'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: spring-boot-microservices-demo/target/site/jacoco/
        retention-days: 7

  package:
    name: Package Banking Service
    runs-on: ubuntu-latest
    needs: [changes, build, test]
    if: |
      needs.changes.outputs.banking-service == 'true' &&
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: spring-boot-microservices-demo/target/classes/
        
    - name: Package application
      working-directory: ./spring-boot-microservices-demo
      run: |
        mvn package -B --no-transfer-progress \
          -DskipTests=true \
          -Dspring.profiles.active=prod
          
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: spring-boot-microservices-demo/target/*.jar
        retention-days: 30

  docker:
    name: Build Banking Docker Image
    runs-on: ubuntu-latest
    needs: [changes, package]
    if: |
      needs.changes.outputs.banking-service == 'true' &&
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: application-jar
        path: spring-boot-microservices-demo/target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DOCKER_HUB_USERNAME != '' && secrets.DOCKER_HUB_ACCESS_TOKEN != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      continue-on-error: true

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_HUB_USERNAME != '' && secrets.DOCKER_HUB_USERNAME || 'local' }}/portfolio-banking-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./spring-boot-microservices-demo
        file: ./spring-boot-microservices-demo/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DOCKER_HUB_USERNAME != '' && secrets.DOCKER_HUB_ACCESS_TOKEN != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true

    - name: Docker push status
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      run: |
        if [[ -z "$DOCKER_USERNAME" || -z "$DOCKER_TOKEN" ]]; then
          echo "⚠️  Docker push skipped - Docker Hub credentials not configured"
          echo "To enable Docker push, configure DOCKER_HUB_USERNAME and DOCKER_HUB_ACCESS_TOKEN secrets"
        else
          echo "✅ Docker image built and pushed successfully"
        fi


    - name: Upload Docker image info
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DOCKER_HUB_USERNAME != '' && secrets.DOCKER_HUB_ACCESS_TOKEN != ''
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-info
        path: |
          docker-image-digest.txt
        retention-days: 30
      continue-on-error: true

  security-scan:
    name: Banking Security Scan
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: needs.changes.outputs.banking-service == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP Dependency Check
      working-directory: ./spring-boot-microservices-demo
      run: |
        mvn org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=7 \
          -DskipTests=true
      continue-on-error: true
      
    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: spring-boot-microservices-demo/target/dependency-check-report.html
        retention-days: 7

  notify:
    name: Notify Pipeline Results
    runs-on: ubuntu-latest
    needs: [changes, build, test, package, docker, security-scan]
    if: always() && (needs.changes.outputs.banking-service == 'true' || needs.changes.outputs.analytics-service == 'true')
    
    steps:
    - name: Generate Pipeline Summary
      run: |
        echo "## 🏦 Portfolio Services Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Service Changes Detected:" >> $GITHUB_STEP_SUMMARY
        echo "- Banking Service: ${{ needs.changes.outputs.banking-service }}" >> $GITHUB_STEP_SUMMARY
        echo "- Analytics Service: ${{ needs.changes.outputs.analytics-service }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.changes.outputs.banking-service }}" == "true" ]; then
          echo "### Banking Service Results:" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Package | ${{ needs.package.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify Success
      if: |
        (needs.changes.outputs.banking-service != 'true' || 
         (needs.build.result == 'success' && needs.test.result == 'success'))
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "Build: ${{ needs.build.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Package: ${{ needs.package.result }}"
        echo "Docker: ${{ needs.docker.result || 'skipped (no Docker Hub credentials)' }}"
        echo "Security: ${{ needs.security-scan.result }}"
        
    - name: Notify Failure
      if: needs.build.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Pipeline failed!"
        echo "Build: ${{ needs.build.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Package: ${{ needs.package.result }}"
        echo "Docker: ${{ needs.docker.result || 'skipped (no Docker Hub credentials)' }}"
        echo "Security: ${{ needs.security-scan.result }}"
        exit 1
