apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "banking-microservice.fullname" . }}
  labels:
    {{- include "banking-microservice.labels" . | nindent 4 }}
spec:
  replicas: {{ include "banking-microservice.replicaCount" . }}
  selector:
    matchLabels:
      {{- include "banking-microservice.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "banking-microservice.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "banking-microservice.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
            {{- end }}
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.app.profile | quote }}
            - name: JAVA_OPTS
              value: "-Xmx{{ .Values.app.jvm.heapSize }} {{ .Values.app.jvm.options }}"
            - name: SERVER_PORT
              value: {{ .Values.service.targetPort | quote }}
            # Database configuration
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.name }}"
            {{- if .Values.externalSecrets.enabled }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: password
            {{- end }}
            # Redis configuration
            - name: REDIS_HOST
              value: {{ .Values.redis.host | quote }}
            - name: REDIS_PORT
              value: {{ .Values.redis.port | quote }}
            - name: SPRING_REDIS_TIMEOUT
              value: "{{ .Values.redis.timeout }}ms"
            # Kafka configuration
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: {{ .Values.kafka.bootstrapServers | quote }}
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: {{ .Values.kafka.consumerGroupId | quote }}
            # JPA/Hibernate configuration
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA
              value: {{ .Values.database.schema | quote }}
            - name: SPRING_FLYWAY_SCHEMAS
              value: {{ .Values.database.schema | quote }}
            - name: SPRING_FLYWAY_DEFAULT_SCHEMA
              value: {{ .Values.database.schema | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "banking-microservice.fullname" . }}-config
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessCheck.enabled }}
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: {{ .Values.readinessCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessCheck.timeoutSeconds }}
            successThreshold: {{ .Values.readinessCheck.successThreshold }}
            failureThreshold: {{ .Values.readinessCheck.failureThreshold }}
          {{- end }}
          resources:
            {{- include "banking-microservice.resources" . | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
